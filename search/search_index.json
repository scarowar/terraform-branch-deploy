{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terraform Branch Deploy","text":""},{"location":"#overview","title":"Overview","text":"<p>Terraform Branch Deploy extends branch-deploy with first-class support for Terraform infrastructure automation.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>PR-driven automation: Trigger <code>plan</code> and <code>apply</code> by commenting on pull requests.</li> <li>Environment targeting: Define environments (dev, staging, prod, etc.) in <code>.tf-branch-deploy.yml</code> with per-environment config, var files, and working directories.</li> <li>Safe deployments: Preview every change with a Terraform plan before apply, and support instant rollbacks to a stable branch.</li> <li>Environment locking: Prevent concurrent or conflicting deployments with automatic and manual environment locks.</li> <li>Custom arguments: Pass extra Terraform CLI arguments from PR comments and fine-tune behavior per environment or globally via <code>.tf-branch-deploy.yml</code>.</li> <li>Enterprise ready: Works with GitHub Enterprise Server (GHES) and public GitHub, with automated GHES release tagging.</li> <li>Workflow integration: Use the <code>skip</code> input to extract environment context for advanced, multi-step workflows without running Terraform operations.</li> </ul>"},{"location":"#workflow-example","title":"Workflow Example","text":"<p>See how easy it is to preview and deploy changes with Terraform Branch Deploy:</p> 1. Trigger <code>plan</code> command <p></p> <p>Comment <code>.plan to dev</code> on a pull request to start a Terraform plan for the <code>dev</code> environment.</p> 2. Review <code>plan</code> output <p></p> <p>The plan output is posted back to the pull request for review and approval.</p> 3. Trigger <code>apply</code> command <p></p> <p>After review, comment <code>.apply to dev</code> to initiate the deployment to the <code>dev</code> environment.</p> 4. Review <code>apply</code> output <p></p> <p>The apply output is posted back to the pull request, confirming the deployment results.</p>"},{"location":"#need-help","title":"Need Help?","text":"<ul> <li>Questions? Start a discussion</li> <li>Found a bug? Open an issue</li> <li>Security concern? See our security policy</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We'd love your help making Terraform Branch Deploy even better! Check out our contributing guide to get started.</p>"},{"location":"#license","title":"License","text":"<p>MIT License - see LICENSE for details.</p> <p>Made with    in Mysuru, India</p>"},{"location":"404/","title":"Page Not Found","text":"<p>Sorry, the page you are looking for does not exist.</p> <ul> <li>Check the URL for typos</li> <li>Use the navigation above to find what you need</li> <li>Return to the home page</li> </ul> <p>If you believe this is a bug, please open an issue.</p>"},{"location":"advanced/","title":"Advanced Workflows","text":"<p>Take your automation further with advanced patterns, skip mode, and real-world workflow examples.</p>"},{"location":"advanced/#using-skip-mode-for-composable-workflows","title":"Using Skip Mode for Composable Workflows","text":"<p>Skip mode lets you extract environment and parameter info from PR comments\u2014without running any Terraform operations. This is ideal for:</p> <ul> <li>Injecting environment-specific secrets</li> <li>Running pre-checks or conditional logic</li> <li>Chaining multiple actions in a single workflow</li> </ul> <p>How to use skip mode:</p> Workflow step: Extract environment info only<pre><code>- name: Extract environment info\n    id: extract-env\n    uses: scarowar/terraform-branch-deploy@v0.1.0\n    with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        skip: true\n\n- name: Use environment info\n    run: echo \"Target environment is ${{ steps.extract-env.outputs.env }}\"\n</code></pre> <p>Available outputs:</p> Output Description <code>env</code> The selected environment (e.g., dev, prod) <code>params</code> Raw parameters from the command <code>parsed_params</code> JSON object of parsed parameters <code>continue</code> \"true\" if deployment should proceed"},{"location":"advanced/#advanced-workflow-examples","title":"Advanced Workflow Examples","text":""},{"location":"advanced/#injecting-secrets-based-on-environment","title":"Injecting Secrets Based on Environment","text":"Inject secrets for production<pre><code>- name: Extract environment info\n    id: extract-env\n    uses: scarowar/terraform-branch-deploy@v0.1.0\n    with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        skip: true\n\n- name: Inject production secrets\n    if: ${{ steps.extract-env.outputs.env == 'prod' }}\n    run: echo \"Injecting production secrets...\"\n</code></pre>"},{"location":"advanced/#conditional-steps-for-staging","title":"Conditional Steps for Staging","text":"Run staging-specific checks<pre><code>- name: Extract environment info\n    id: extract-env\n    uses: scarowar/terraform-branch-deploy@v0.1.0\n    with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        skip: true\n\n- name: Run staging checks\n    if: ${{ steps.extract-env.outputs.env == 'staging' }}\n    run: echo \"Running staging-specific checks\"\n</code></pre>"},{"location":"advanced/#multi-step-workflow-with-skip-mode","title":"Multi-Step Workflow with Skip Mode","text":"<p>You can chain steps using outputs from skip mode to build complex, environment-aware workflows.</p> Composable multi-step workflow<pre><code>- name: Extract environment info\n    id: extract-env\n    uses: scarowar/terraform-branch-deploy@v0.1.0\n    with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        skip: true\n\n- name: Pre-deployment validation\n    run: |\n        echo \"Validating for ${{ steps.extract-env.outputs.env }}\"\n        # Add custom validation logic here\n\n- name: Deploy if allowed\n    if: ${{ steps.extract-env.outputs.continue == 'true' }}\n    uses: scarowar/terraform-branch-deploy@v0.1.0\n    with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> <p>See Configuration for all options, or Commands for the full command reference.</p>"},{"location":"commands/","title":"Commands","text":"<p>Terraform Branch Deploy supports a set of pull request commands for safe, auditable, and flexible infrastructure automation. Use these commands as PR comments to trigger actions.</p>"},{"location":"commands/#core-commands","title":"Core Commands","text":"Command Pattern Description Example Usage <code>.plan to &lt;env&gt;</code> Preview changes for a specific environment (noop mode) <code>.plan to dev</code> <code>.plan to &lt;env&gt; | &lt;args&gt;</code> Preview with extra Terraform CLI arguments <code>.plan to dev | -var=debug=true</code> <code>.apply to &lt;env&gt;</code> Deploy this branch to the environment <code>.apply to dev</code> <code>.apply &lt;branch&gt; to &lt;env&gt;</code> Rollback the environment to a specific branch <code>.apply main to dev</code> <code>.apply to &lt;env&gt; | &lt;args&gt;</code> Deploy with extra Terraform CLI arguments <code>.apply to dev | -auto-approve=false</code> <p>Tip</p> <p>All commands require an environment (e.g., <code>to dev</code>). By default, naked commands (without an environment) are blocked for safety. You can allow them by setting <code>disable_naked_commands: false</code> in your workflow.</p>"},{"location":"commands/#locking-unlocking","title":"Locking &amp; Unlocking","text":"Command Pattern Description Example Usage <code>.lock &lt;env&gt;</code> Obtain the deployment lock for the specified environment <code>.lock dev</code> <code>.lock &lt;env&gt; --reason &lt;text&gt;</code> Lock environment with a reason <code>.lock dev --reason \"maintenance\"</code> <code>.lock --global</code> Obtain a global deployment lock (blocks all environments) <code>.lock --global</code> <code>.lock --global --reason &lt;text&gt;</code> Global lock with a reason <code>.lock --global --reason \"incident\"</code> <code>.unlock &lt;env&gt;</code> Release the deployment lock for the specified environment <code>.unlock dev</code> <code>.unlock --global</code> Release the global deployment lock <code>.unlock --global</code> <code>.lock &lt;env&gt; --details</code> Show information about the current lock for the environment <code>.lock dev --details</code> <code>.lock --global --details</code> Show information about the current global deployment lock <code>.lock --global --details</code> <code>.wcid &lt;env&gt;</code> Alias for <code>.lock &lt;env&gt; --details</code> <code>.wcid dev</code> <p>Comment <code>.lock dev</code> on a pull request to obtain a deployment lock for the environment.</p> <p></p> <p>Comment <code>.wcid dev</code> on a pull request to view details about the current lock for the environment.</p> <p></p> <p>Comment <code>.unlock dev</code> on a pull request to release the deployment lock for the environment.</p> <p>Note</p> <p>Locking is essential for preventing concurrent or conflicting deployments. Use global locks to block all environments during maintenance or incidents.</p>"},{"location":"commands/#passing-extra-arguments","title":"Passing Extra Arguments","text":"<p>You can pass extra Terraform CLI arguments (such as <code>--target</code> or <code>--var</code>) by piping them after your command. For example:</p> <p></p> <p>Comment <code>.plan to dev | --target=null_resource.dev_test</code> on a pull request to pass extra arguments to Terraform.</p>"},{"location":"commands/#best-practices","title":"Best Practices","text":"<ul> <li>Always specify the environment to avoid accidental changes.</li> <li>Use locking for production and critical environments.</li> <li>Use global locks during maintenance or incidents.</li> <li>Use rollback commands (e.g., <code>.apply main to &lt;env&gt;</code>) for safe, auditable recovery from mistakes or incidents.</li> <li>Use extra arguments for advanced Terraform options.</li> <li>Review plan output before applying changes.</li> </ul> <p>See Quickstart to get started, or Advanced Workflows for more complex scenarios.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Learn how to configure Terraform Branch Deploy for your workflows, environments, and advanced use cases.</p>"},{"location":"configuration/#action-inputs","title":"Action Inputs","text":"<p>The action accepts several inputs to customize its behavior. Add these under the <code>with:</code> section in your workflow YAML.</p> Input Description Default Example <code>github-token</code> GitHub token with required permissions \u2014 <code>${{ secrets.GITHUB_TOKEN }}</code> <code>terraform-version</code> Terraform CLI version to use <code>latest</code> <code>1.7.5</code> <code>working-directory</code> Default path to Terraform files <code>.</code> <code>infrastructure/</code> <code>noop-trigger</code> Command for plan operations <code>.plan</code> <code>.preview</code> <code>trigger</code> Command for apply operations <code>.apply</code> <code>.deploy</code> <code>stable_branch</code> Branch for rollback operations <code>main</code> <code>master</code> <code>skip</code> Extract environment info and exit early (Skip Mode). See Skip Mode below. <code>false</code> <code>true</code> <code>admins</code> Comma-separated list of admin users/teams \u2014 <code>monalisa,octocat,my-org/my-team</code> <code>admins_pat</code> Personal access token for org team access \u2014 <code>${{ secrets.ADMIN_PAT }}</code> <code>disable_naked_commands</code> Require environment for commands (e.g., <code>.plan to dev</code>). Block naked commands for safety. <code>\"true\"</code> <code>\"false\"</code> <p>Tip</p> <p>Most users only need to set <code>github-token</code>. Other inputs are optional and for advanced scenarios.</p>"},{"location":"configuration/#action-outputs","title":"Action Outputs","text":"<p>Outputs are available as step outputs in your workflow. Use them for conditional logic or chaining steps.</p> Output Description <code>env</code> The environment selected for deployment <code>continue</code> \"true\" if deployment should continue, otherwise empty <code>sha</code> The SHA of the branch to be deployed <code>rollback</code> \"true\" if this is a rollback operation <code>plan</code> \"true\" if this is a plan operation <code>apply</code> \"true\" if this is an apply operation <code>params</code> The raw parameters passed into the deployment command <code>parsed_params</code> Stringified JSON of parsed parameters"},{"location":"configuration/#yaml-configuration-file","title":"YAML Configuration File","text":"<p>The <code>.tf-branch-deploy.yml</code> file defines your deployment environments, defaults, and advanced options. Its structure is validated by a JSON schema for IDE autocompletion and error checking.</p> <p>Below is an extensive example covering all supported fields, with inline annotations explaining each part:</p> .tf-branch-deploy.yml (full example)<pre><code># yaml-language-server: $schema=./tf-branch-deploy.schema.json  # (1)\ndefault-environment: dev  # (2)\nproduction-environments:  # (3)\n  - prod\n  - main\ndefaults:  # (4)\n  var-files:  # (5)\n    paths:\n      - common.tfvars\n  backend-configs:  # (6)\n    paths:\n      - common.backend.tfvars\n  plan-args:  # (7)\n    args:\n      - \"-compact-warnings\"\n  apply-args:  # (8)\n    args:\n      - \"-auto-approve\"\n  init-args:  # (9)\n    args:\n      - \"-upgrade\"\nenvironments:  # (10)\n  dev:  # (11)\n    working-directory: ./terraform/dev  # (12)\n    var-files:\n      paths:\n        - ./terraform/dev/dev.tfvars\n    backend-configs:\n      paths:\n        - ./terraform/dev/dev.backend.tfvars\n    plan-args:\n      args:\n        - \"-parallelism=10\"\n    apply-args:\n      args:\n        - \"-auto-approve=false\"\n    init-args:\n      args:\n        - \"-reconfigure\"\n  prod:  # (13)\n    working-directory: ./terraform/prod\n    var-files:\n      inherit: false  # (14)\n      paths:\n        - ./terraform/prod/prod.tfvars\n        - ./terraform/prod/secrets.tfvars\n    backend-configs:\n      inherit: false  # (15)\n      paths:\n        - ./terraform/prod/prod.backend.tfvars\n    plan-args:\n      inherit: false  # (16)\n      args:\n        - \"-parallelism=30\"\n    apply-args:\n      args:\n        - \"-auto-approve\"\n    init-args:\n      args:\n        - \"-upgrade\"\n</code></pre> <ol> <li>YAML schema reference \u2014 Enables IDE autocompletion and validation.</li> <li>default-environment \u2014 The default environment to deploy to if none is specified.</li> <li>production-environments \u2014 List of environments considered production for extra safety and GitHub deployment status.</li> <li>defaults \u2014 Shared settings inherited by all environments unless overridden.</li> <li>var-files \u2014 Default variable files for all environments.</li> <li>backend-configs \u2014 Default backend config files for all environments.</li> <li>plan-args \u2014 Default arguments for <code>terraform plan</code>.</li> <li>apply-args \u2014 Default arguments for <code>terraform apply</code>.</li> <li>init-args \u2014 Default arguments for <code>terraform init</code>.</li> <li>environments \u2014 Map of environment names to their configuration.</li> <li>dev \u2014 Example environment definition.</li> <li>working-directory \u2014 Path to the Terraform code for this environment.</li> <li>prod \u2014 Example production environment definition.</li> <li>inherit: false \u2014 Prevents inheriting defaults for this section.</li> <li>inherit: false \u2014 Prevents inheriting backend-configs defaults.</li> <li>inherit: false \u2014 Prevents inheriting plan-args defaults.</li> </ol> <p>Refer to the schema file for a full list of supported fields and validation rules.</p>"},{"location":"configuration/#inheritance-and-overrides","title":"Inheritance and Overrides","text":"<p>You can define shared defaults and override them per environment. For example:</p> Partial config: Inheritance and overrides<pre><code>defaults:\n  plan-args:\n    args: [\"-compact-warnings\"]\n\nenvironments:\n  prod:\n    plan-args:\n      inherit: false  # Don't inherit defaults\n      args: [\"-parallelism=30\"]\n</code></pre> <p>Note</p> <p>Use <code>inherit: false</code> to prevent an environment from inheriting a default value.</p>"},{"location":"configuration/#skip-mode","title":"Skip Mode","text":"<p>The <code>skip</code> input enables a special mode where the action only extracts environment info and outputs, without running any Terraform operations. This is useful for advanced workflows, secrets management, or conditional logic.</p> Workflow step: Skip mode<pre><code>- name: Extract environment info only\n  uses: scarowar/terraform-branch-deploy@v0.1.0\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    skip: true\n\n- name: Use environment info\n  run: echo \"Target environment is ${{ steps.extract-env.outputs.env }}\"\n</code></pre> <p>Tip</p> <p>Skip mode is ideal for multi-step workflows or when integrating with other tools.</p>"},{"location":"configuration/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>production-environments</code> to protect critical environments.</li> <li>Keep secrets and sensitive variables in secure files or GitHub secrets.</li> <li>Use inheritance to avoid duplication, but override as needed for special cases.</li> <li>Validate your YAML with the provided schema for IDE autocompletion and error checking.</li> </ul> <p>See Commands for all supported PR commands, or Advanced Workflows for more complex scenarios.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Get started with Terraform Branch Deploy in your repository in just a few steps.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>A GitHub repository with your Terraform configuration files</li> <li>Cloud provider credentials (AWS, Azure, GCP, etc.)</li> <li>Permissions to use GitHub Actions and Deployments</li> </ul>"},{"location":"quickstart/#1-add-the-workflow","title":"1. Add the Workflow","text":"<p>Create a workflow file at <code>.github/workflows/terraform-deploy.yml</code> in your repository:</p> .github/workflows/terraform-deploy.yml<pre><code>name: \"Terraform Branch Deploy\"\n\non:\n  issue_comment:\n    types: [created]\n\npermissions:\n  pull-requests: write\n  deployments: write\n  contents: write\n  checks: read\n  statuses: read\n\njobs:\n  terraform_deployment:\n    if: ${{ github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      # Add your cloud authentication here (AWS, Azure, GCP, etc.)\n      - name: terraform-branch-deploy\n        uses: scarowar/terraform-branch-deploy@v0.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"quickstart/#2-configure-environments","title":"2. Configure Environments","text":"<p>Add a <code>.tf-branch-deploy.yml</code> file to your repository root. Example:</p> .tf-branch-deploy.yml<pre><code># yaml-language-server: $schema=./tf-branch-deploy.schema.json\n\ndefault-environment: dev\nproduction-environments:\n  - prod\ndefaults:\n  var-files:\n    paths:\n      - common.tfvars\nenvironments:\n  dev:\n    working-directory: ./terraform/dev\n    var-files:\n      paths:\n        - ./terraform/dev/dev.tfvars\n  prod:\n    working-directory: ./terraform/prod\n    var-files:\n      inherit: false\n      paths:\n        - ./terraform/prod/prod.tfvars\n        - ./terraform/prod/secrets.tfvars\n</code></pre>"},{"location":"quickstart/#3-deploy-from-a-pull-request","title":"3. Deploy from a Pull Request","text":"<p>Comment on any pull request to preview, deploy, or rollback changes:</p> <ul> <li><code>.plan to dev</code> \u2014 Preview changes for the <code>dev</code> environment</li> <li><code>.apply to dev</code> \u2014 Deploy changes to the <code>dev</code> environment</li> <li><code>.apply main to prod</code> \u2014 Rollback <code>prod</code> to the <code>main</code> branch</li> </ul> <p>Tip</p> <p>Add extra Terraform arguments with a pipe, e.g. <code>.plan to dev | -var=debug=true</code></p>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>See Configuration for advanced options</li> <li>Explore Commands for all supported PR commands</li> <li>Learn about Advanced Workflows and best practices</li> </ul>"}]}