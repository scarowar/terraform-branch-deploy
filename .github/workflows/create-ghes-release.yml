name: Create GHES Compatible Release

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-ghes-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: 📥 Determine tag to use
        id: get_tag
        run: |
          set -euo pipefail
          TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [ -z "$TAG" ]; then
            echo "::error::No releases found. Please create a release first."
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ steps.get_tag.outputs.tag }}

      - name: 🔧 Get version from tag
        id: get_version
        run: |
          raw_tag="${{ steps.get_tag.outputs.tag }}"
          echo "version=${raw_tag#v}" >> "$GITHUB_OUTPUT"

      - name: 🌳 Create GHES release branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release/v${{ steps.get_version.outputs.version }}-ghes

      - name: 🔄 Downgrade actions for GHES
        id: downgrade
        run: |
          set -euo pipefail
          echo "Downgrading actions in action.yml files for GHES compatibility..."

          if ! find . -type f -name 'action.yml' -print -quit | grep -q .; then
            echo "::warning::No action.yml files found to process. Skipping downgrade step."
            exit 0
          fi

          find . -type f -name "action.yml" -exec \
            sed -i -E 's|actions/upload-artifact@[0-9a-fA-F]{7,40}([[:space:]]*#.*)?$|actions/upload-artifact@v3|g' {} +

          echo "✅ Actions downgraded successfully."

      - name: ⬆️ Commit and push changes
        id: commit_and_push
        run: |
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit. Skipping commit and push."
            echo "pushed=false" >> "$GITHUB_OUTPUT"
          else
            git commit -am "chore: downgrade upload-artifact for ghes compatibility"
            git push -u origin release/v${{ steps.get_version.outputs.version }}-ghes
            echo "pushed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: 🎉 Create GHES Release
        if: steps.commit_and_push.outputs.pushed == 'true'
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          GHES_TAG="v${VERSION}-ghes"
          RELEASE_BRANCH="release/${GHES_TAG}"

          # Get release notes from the original release, with a fallback for an empty body
          RELEASE_NOTES=$(gh release view "${{ steps.get_tag.outputs.tag }}" --json body --jq .body) || RELEASE_NOTES="See original release for details."
          RELEASE_NOTES_FILE=$(mktemp)
          printf '%s' "$RELEASE_NOTES" >"$RELEASE_NOTES_FILE"

          gh release create "$GHES_TAG" \
            --target "$RELEASE_BRANCH" \
            --title "v${VERSION} (GHES)" \
            --notes-file "$RELEASE_NOTES_FILE" \
            --latest=false

      - name: 🧹 Cleanup release branch
        if: always() && steps.commit_and_push.outputs.pushed == 'true'
        run: |
          git push origin --delete release/v${{ steps.get_version.outputs.version }}-ghes || true
