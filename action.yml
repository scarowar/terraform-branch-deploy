name: terraform-branch-deploy

description: Deploy Terraform infrastructure changes through pull request comments using IssueOps and branch deployments.
author: Sourab Kanthavar <@scarowar>

branding:
  icon: git-branch
  color: purple

inputs:
  # --- Authentication & Permissions ---
  github-token:
    description: "The GitHub token for authentication. Requires 'pull-requests: write', 'deployments: write', 'contents: write', 'issues: write', 'checks: read', 'statuses: read' permissions."
    required: true

  # --- Terraform Tooling Configuration ---
  terraform-version:
    description: The version of Terraform CLI to install. Can be an exact version (e.g., '1.7.5'), a constraint string (e.g., '<1.13.0', '~>1.5.0'), or 'latest' for the most recent version.
    required: false
    default: latest

  # --- Terraform Project Path Configuration ---
  working-directory:
    description: The global default path to your Terraform configuration files, relative to the repository root. Use '.' for root-level Terraform files, or specify a subdirectory like 'infrastructure' or 'terraform/prod'. Individual environments can override this in .tf-branch-deploy.yml using their own 'working-directory' setting.
    required: false
    default: .

  # --- IssueOps Command Triggers ---
  noop-trigger:
    description: "The PR comment trigger for Terraform plan operations (read-only preview). Examples: '.plan', '.terraform-plan', '.preview'."
    required: false
    default: .plan
  trigger:
    description: "The PR comment trigger for Terraform apply operations (actual deployment). Examples: '.apply', '.terraform-apply', '.deploy'"
    required: false
    default: .apply

  # --- Stable Branch & Rollback Configuration ---
  stable_branch:
    description: The stable branch name containing the last known good infrastructure state. Deployments from this branch trigger rollback operations. Examples include main or master.
    required: false
    default: main

  # --- Skip Mode for Early Environment Extraction ---
  skip:
    description: When true, extracts environment information and exits without performing deployments. Use this mode to determine the target environment and access environment-specific secrets in multi-step workflows without running Terraform operations.
    required: false
    default: "false"

  # --- Admins and Admins PAT ---
  admins:
    description: "A comma separated list of GitHub usernames or teams that should be considered admins by this Action. Admins can deploy pull requests without the need for branch protection approvals. Example: 'monalisa,octocat,my-org/my-team'"
    required: false
    default: "false"
  admins_pat:
    description: "A GitHub personal access token with 'read:org' scopes. This is only needed if you are using the 'admins' option with a GitHub org team. For example: 'my-org/my-team'"
    required: false
    default: "false"

  # --- Disable Naked Commands ---
  disable_naked_commands:
    description: "Require users to specify an environment when using IssueOps commands (e.g., `.plan to dev` instead of just `.plan`). When set to `true` (default), commands without an environment are blocked for safety."
    required: false
    default: "true"

outputs:
  env:
    description: "Extracted environment"
    value: ${{ steps.skip.outputs.env }}
  continue:
    description: "Continue flag"
    value: ${{ steps.skip.outputs.continue }}
  noop:
    description: "Noop flag"
    value: ${{ steps.skip.outputs.noop }}
  sha:
    description: "Commit SHA"
    value: ${{ steps.skip.outputs.sha }}

runs:
  using: composite
  steps:
  - name: ⚙️ Set Action Ref
    id: set_ref
    run: echo "ref=${{ env.ACTION_REF }}" >> $GITHUB_OUTPUT
    shell: bash
    env:
      ACTION_REF: ${{ github.action_ref }}

  - name: 📥 Checkout Action Repository
    if: ${{ github.server_url == 'https://github.com' }}
    uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    with:
      repository: scarowar/terraform-branch-deploy
      ref: ${{ steps.set_ref.outputs.ref }}
      path: .this-action

  - name: 📥 Clone Action Repository (GHES Workaround)
    if: ${{ github.server_url != 'https://github.com' }}
    run: |
      rm -rf .this-action
      mkdir -p .this-action
      git clone https://github.com/scarowar/terraform-branch-deploy.git .this-action
      cd .this-action
      git checkout "${{ steps.set_ref.outputs.ref }}"
      cd - # Go back to the original directory
    shell: bash

  - name: 🛠️ Setup Environment
    id: setup
    uses: ./.this-action/actions/setup
    with:
      skip: ${{ inputs.skip }}
      github-token: ${{ inputs.github-token }}
      main-action-path: ./.this-action

  - name: 🛸 IssueOps Command Dispatcher
    if: ${{ inputs.skip == 'true' }}
    id: branch-deploy-skip
    uses: github/branch-deploy@e837cad62fcc6f5f45997baafd69c57ea9b0641d # v10.4.2
    with:
      github_token: ${{ inputs.github-token }}
      noop_trigger: ${{ inputs.noop-trigger }}
      trigger: ${{ inputs.trigger }}
      environment_targets: "${{ steps.setup.outputs.available_envs }}"
      environment: ${{ steps.setup.outputs.default_environment }}
      production_environments: "${{ steps.setup.outputs.production_environments }}"
      stable_branch: ${{ inputs.stable_branch }}
      admins: ${{ inputs.admins }}
      admins_pat: ${{ inputs.admins_pat }}
      disable_naked_commands: ${{ inputs.disable_naked_commands }}
      skip_completing: true

  - name: Delete Issue/PR Comment
    if: ${{ steps.branch-deploy-skip.outputs.initial_comment_id }}
    uses: actions/github-script@v7
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const owner = context.repo.owner;
        const repo = context.repo.repo;
        const comment_id = process.env.COMMENT_ID;
        await github.rest.issues.deleteComment({
          owner,
          repo,
          comment_id: Number(comment_id)
        });
    env:
      COMMENT_ID: ${{ steps.branch-deploy-skip.outputs.initial_comment_id }}

  - name: 🛸 IssueOps Command Dispatcher
    if: ${{ inputs.skip != 'true' }}
    id: branch-deploy
    uses: github/branch-deploy@e837cad62fcc6f5f45997baafd69c57ea9b0641d # v10.4.2
    with:
      github_token: ${{ inputs.github-token }}
      noop_trigger: ${{ inputs.noop-trigger }}
      trigger: ${{ inputs.trigger }}
      environment_targets: "${{ steps.setup.outputs.available_envs }}"
      environment: ${{ steps.setup.outputs.default_environment }}
      production_environments: "${{ steps.setup.outputs.production_environments }}"
      stable_branch: ${{ inputs.stable_branch }}
      admins: ${{ inputs.admins }}
      admins_pat: ${{ inputs.admins_pat }}
      disable_naked_commands: ${{ inputs.disable_naked_commands }}

  - name: 🔎 Early Exit for Skip Mode
    if: ${{ inputs.skip == 'true' }}
    id: skip
    run: |
      echo "env=${{ steps.branch-deploy-skip.outputs.environment }}" >> $GITHUB_OUTPUT
      echo "continue=${{ steps.branch-deploy-skip.outputs.continue }}" >> $GITHUB_OUTPUT
      echo "noop=${{ steps.branch-deploy-skip.outputs.noop }}" >> $GITHUB_OUTPUT
      echo "sha=${{ steps.branch-deploy-skip.outputs.sha }}" >> $GITHUB_OUTPUT
      exit 0
    shell: bash

  - name: 🚨 Perform Rollback
    if: ${{ inputs.skip != 'true' && steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.ref == inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false' }}
    uses: ./.this-action/actions/run
    with:
      command: rollback
      github-token: ${{ inputs.github-token }}
      terraform-version: ${{ inputs.terraform-version }}
      working-directory: ${{ inputs.working-directory }}
      sha: ${{ steps.branch-deploy.outputs.sha }}
      environment: ${{ steps.branch-deploy.outputs.environment }}
      params: ${{ steps.branch-deploy.outputs.params }}
      github_run_id: ${{ github.run_id }}
      github_actor: ${{ github.actor }}
      github_event_issue_number: ${{ github.event.issue.number || github.event.pull_request.number }}
      github_repository_owner: ${{ github.repository_owner }}
      github_repository_name: ${{ github.event.repository.name }}
      main-action-path: ./.this-action

  - name: 📋 Perform Plan
    if: ${{ inputs.skip != 'true' && steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'true' }}
    uses: ./.this-action/actions/run
    with:
      command: plan
      github-token: ${{ inputs.github-token }}
      terraform-version: ${{ inputs.terraform-version }}
      working-directory: ${{ inputs.working-directory }}
      sha: ${{ steps.branch-deploy.outputs.sha }}
      environment: ${{ steps.branch-deploy.outputs.environment }}
      params: ${{ steps.branch-deploy.outputs.params }}
      github_run_id: ${{ github.run_id }}
      github_actor: ${{ github.actor }}
      github_event_issue_number: ${{ github.event.issue.number || github.event.pull_request.number }}
      github_repository_owner: ${{ github.repository_owner }}
      github_repository_name: ${{ github.event.repository.name }}
      main-action-path: ./.this-action

  - name: 🚀 Perform Apply
    if: ${{ inputs.skip != 'true' && steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false' }}
    uses: ./.this-action/actions/run
    with:
      command: apply
      github-token: ${{ inputs.github-token }}
      terraform-version: ${{ inputs.terraform-version }}
      working-directory: ${{ inputs.working-directory }}
      sha: ${{ steps.branch-deploy.outputs.sha }}
      environment: ${{ steps.branch-deploy.outputs.environment }}
      params: ${{ steps.branch-deploy.outputs.params }}
      github_run_id: ${{ github.run_id }}
      github_actor: ${{ github.actor }}
      github_event_issue_number: ${{ github.event.issue.number || github.event.pull_request.number }}
      github_repository_owner: ${{ github.repository_owner }}
      github_repository_name: ${{ github.event.repository.name }}
      main-action-path: ./.this-action
